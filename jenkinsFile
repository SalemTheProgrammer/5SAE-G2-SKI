pipeline {
    agent any

    stages {
        stage('GIT') {
            steps {
                git branch: 'INESRDISSI-5SAE7-G2',
                    url: 'https://github.com/SalemTheProgrammer/5SAE-G2-SKI.git'
            }
        }
        
        stage('Compile Stage') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'mvn -Dtest=InstructorServicesImplTest test'
            }
        }

        stage('SonarQube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=Sonarsonar1* -Dmaven.test.skip=true'
            }
        }

        stage('Nexus') {
            steps {
                sh 'mvn deploy -Dmaven.test.skip=true'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image for the application"
                sh 'docker build -t gestion-station-ski:1.0 . '

            }
        }
        stage('Push to Docker Hub') {
            steps {
                echo "Pushing Docker Image to Docker Hub"
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker tag gestion-station-ski:1.0 $DOCKER_USERNAME/gestion-station-ski:1.0'
                    sh 'docker push $DOCKER_USERNAME/gestion-station-ski:1.0'
                }
            }
        }


        stage('Deploy with Docker Compose') {
            steps {
                echo "Deploying with Docker Compose"
                sh 'docker compose up -d --build'
            }
        }
    }

post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo "Sending success email..."
            mail (
                to: 'inesrdissi60@gmail.com',
                subject: "Success",
                body: "The build was successful."
            )
            echo "Success email sent."
        }
        failure {
            echo "Sending failure email..."
            mail (
                to: 'inesrdissi60@gmail.com',
                subject: "Fail",
                body: "Unfortunately, the build has failed."
            )
            echo "Failure email sent."
        }
    }

}

